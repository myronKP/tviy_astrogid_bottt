from tviyastrogid_keyboard import (music_q1_kb,music_q2_kb,music_q3_kb,music_q4_kb,music_q5_kb,music_q6_kb,music_q7_kb,
                                   music_q8_kb,music_q9_kb,music_q10_kb,music_q11_kb,music_q12_kb,music_q13_kb,
                                   music_q14_kb,music_q15_kb)
from tviyastrogid_keyboard import (architips_q1_kb, architips_q2_kb, architips_q3_kb, architips_q4_kb,
                                   architips_q5_kb, architips_start_kb, architips_partner_kb)
from tviyastrogid_keyboard import (kwiz_question2_inline, archetype_test_kb, explanation_cards_taro_y_or_n, daily_bonus_kb
                                   )
from tviyastrogid_keyboard import zodiac_keyboard
from tviyastrogid_keyboard import main_keyboard
from tviyastrogid_keyboard import taro_question1
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters.state import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart
from mistralai import Mistral
from aiogram import Router, F
import elevenlabs
import asyncio
import random
from collections import Counter
from elevenlabs.client import ElevenLabs
from pydub import AudioSegment
import aiofiles
import asyncio
from collections import Counter
import sqlite3
from aiogram import Bot
from aiogram.filters import CommandObject
from aiogram.utils.markdown import hbold
router = Router()
class ProblemState(StatesGroup):
    waiting_for_problem = State()
class DreamState(StatesGroup):
    waiting_for_dream = State()
class ArchetypeTest(StatesGroup):
    person = State()
    q1 = State()
    q2 = State()
    q3 = State()
    q4 = State()
    q5 = State()
class ZodiacCompatibility(StatesGroup):
    your_sign = State()
    partner_sign = State()
class regist(StatesGroup):
    name = State()
    zodiak_callback = State()
    zodiak_callback1 = State()
class taro_answer(StatesGroup):
    come_question1 = State()
    answer1 = State()
class AstroChat(StatesGroup):
    waiting_for_question = State()



db = sqlite3.connect("tviyastrogid.db")
cur = db.cursor()
cur.execute("""
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        zodiac_sign TEXT,
        cards INTEGER DEFAULT 50,
        last_gift TEXT
        invited_by INTEGER
)
""")
db.commit()
db.close()
def spend_cards_if_possible(user_id: int, amount: int) -> bool:
    db = sqlite3.connect("tviyastrogid.db")
    cur = db.cursor()
    cur.execute("SELECT cards FROM users WHERE id = ?", (user_id,))
    row = cur.fetchone()
    if row and row[0] >= amount:
        cur.execute("UPDATE users SET cards = cards - ? WHERE id = ?", (amount, user_id))
        db.commit()
        db.close()
        return True
    db.close()
    return False


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    db = sqlite3.connect("tviyastrogid.db")
    cur = db.cursor()
    cur.execute("INSERT OR IGNORE INTO users (id) VALUES (?)", (user_id,))
    db.commit()
    db.close()
    photo = "AgACAgIAAxkBAAIFRGgUnhBhg0pqMszswBANaZYpsCuOAAIb-jEbbpihSGn8T3t5wVOcAQADAgADeQADNgQ"
    await message.answer_photo(
        photo=photo,
        caption="–ü—Ä–∏–≤—ñ—Ç, —Ü–µ —Ç–≤—ñ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ê—Å—Ç—Ä–æ–ì—ñ–¥ üåå\n–Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —Ç–≤–æ—é –¥–æ–ª—é."
    )
    zodiac_msg = await message.answer("–û–±–µ—Ä–∏ —Å–≤—ñ–π –∑–Ω–∞–∫ –∑–æ–¥—ñ–∞–∫—É!", reply_markup=zodiac_keyboard)
    await state.update_data(zodiac_msg_id=zodiac_msg.message_id)
    await state.set_state(regist.zodiak_callback1)


@router.callback_query(StateFilter(regist.zodiak_callback1))
async def zodiac_callback_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    zodiac_msg_id = data.get("zodiac_msg_id")
    if zodiac_msg_id:
        try:
            await callback.message.bot.delete_message(chat_id=callback.message.chat.id, message_id=zodiac_msg_id)
        except:
            pass
    zodiac_map = {
        "zodiac_–û–≤–µ–Ω": "–û–≤–µ–Ω",
        "zodiac_–¢–µ–ª–µ—Ü—å": "–¢–µ–ª–µ—Ü—å",
        "zodiac_–ë–ª–∏–∑–Ω—é–∫–∏": "–ë–ª–∏–∑–Ω—é–∫–∏",
        "zodiac_–†–∞–∫": "–†–∞–∫",
        "zodiac_–õ–µ–≤": "–õ–µ–≤",
        "zodiac_–î—ñ–≤–∞": "–î—ñ–≤–∞",
        "zodiac_–¢–µ—Ä–µ–∑–∏": "–¢–µ—Ä–µ–∑–∏",
        "zodiac_–°–∫–æ—Ä–ø—ñ–æ–Ω": "–°–∫–æ—Ä–ø—ñ–æ–Ω",
        "zodiac_–°—Ç—Ä—ñ–ª–µ—Ü—å": "–°—Ç—Ä—ñ–ª–µ—Ü—å",
        "zodiac_–ö–æ–∑–µ—Ä—ñ–≥": "–ö–æ–∑–µ—Ä—ñ–≥",
        "zodiac_–í–æ–¥–æ–ª—ñ–π": "–í–æ–¥–æ–ª—ñ–π",
        "zodiac_–†–∏–±–∏": "–†–∏–±–∏"
    }
    zodiak = zodiac_map.get(callback.data)
    if not zodiak:
        await callback.message.answer("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –ó–Ω–∞–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    user_id = callback.from_user.id
    db = sqlite3.connect("tviyastrogid.db")
    cur = db.cursor()
    cur.execute("UPDATE users SET zodiac_sign = ? WHERE id = ?", (zodiak, user_id))
    db.commit()
    db.close()
    await callback.message.answer(f"üîÆ –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –í–∏ –æ–±—Ä–∞–ª–∏ –∑–Ω–∞–∫ {zodiak}.")
    await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å —â–æ –≤–∞—Å —ñ–Ω—Ç–µ—Ä–µ—Å—É—î –≤ –º–µ–Ω—é –∑–Ω–∏–∑—É", reply_markup=main_keyboard)
    await state.clear()


@router.message(F.text == "üîÆ –†–æ–∑–∫–ª–∞–¥ –¢–∞—Ä–æ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è ‚Äì 10üÉè")
async def quastion_text(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not spend_cards_if_possible(user_id, 10):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–∞—Ä—Ç! –ü–æ—Ç—Ä—ñ–±–Ω–æ 10 üÉè.")
        return
    await message.answer("üÉè –ù–∞–ø–∏—à–∏ —Å–≤–æ—î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è ‚Äî —ñ —è –∑—Ä–æ–±–ª—é —Ä–æ–∑–∫–ª–∞–¥, —â–æ –≤—ñ–¥–∫—Ä–∏—î –ø—Ä–∏—Ö–æ–≤–∞–Ω—É —Å—É—Ç—å.")
    await state.set_state(taro_answer.come_question1)


@router.message(StateFilter(taro_answer.come_question1))
async def tarot_reading(message: Message, state: FSMContext):
    await message.answer_photo(
        photo="AgACAgIAAxkBAAIFS2gUn8yWzRsY15lVroUlZOMdLYF_AAL76zEbNX-oSLSquGiNbVxoAQADAgADeQADNgQ",
        caption="üîÆ –Ø —Ä–æ–∑–∫–ª–∞–¥–∞—é –∫–∞—Ä—Ç–∏‚Ä¶ –ø—Ä–∏–≥–æ—Ç—É–π—Å—è."
    )
    await asyncio.sleep(4)
    await message.answer("‚ú® –©–µ —Ç—Ä–æ—Ö–∏‚Ä¶")
    await asyncio.sleep(2)
    tarot_cards = [
        # –°—Ç–∞—Ä—à—ñ –ê—Ä–∫–∞–Ω–∏
        "0. –î—É—Ä–∞–∫", "I. –ú–∞–≥", "II. –í–µ—Ä—Ö–æ–≤–Ω–∞ –ñ—Ä–∏—Ü—è", "III. –Ü–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü—è", "IV. –Ü–º–ø–µ—Ä–∞—Ç–æ—Ä",
        "V. –Ü—î—Ä–æ—Ñ–∞–Ω—Ç", "VI. –ó–∞–∫–æ—Ö–∞–Ω—ñ", "VII. –ö–æ–ª—ñ—Å–Ω–∏—Ü—è", "VIII. –°–∏–ª–∞", "IX. –í—ñ–¥–ª—é–¥–Ω–∏–∫",
        "X. –ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω–∏", "XI. –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ñ—Å—Ç—å", "XII. –ü–æ–≤—ñ—à–µ–Ω–∏–π", "XIII. –°–º–µ—Ä—Ç—å",
        "XIV. –£–º—ñ—Ä–µ–Ω—ñ—Å—Ç—å", "XV. –î–∏—è–≤–æ–ª", "XVI. –í–µ–∂–∞", "XVII. –ó—ñ—Ä–∫–∞", "XVIII. –ú—ñ—Å—è—Ü—å",
        "XIX. –°–æ–Ω—Ü–µ", "XX. –°—É–¥", "XXI. –°–≤—ñ—Ç",

        # –ú–æ–ª–æ–¥—à—ñ –ê—Ä–∫–∞–Ω–∏ ‚Äî –ñ–µ–∑–ª–∏
        "–¢—É–∑ –ñ–µ–∑–ª—ñ–≤", "2 –ñ–µ–∑–ª—ñ–≤", "3 –ñ–µ–∑–ª—ñ–≤", "4 –ñ–µ–∑–ª—ñ–≤", "5 –ñ–µ–∑–ª—ñ–≤", "6 –ñ–µ–∑–ª—ñ–≤",
        "7 –ñ–µ–∑–ª—ñ–≤", "8 –ñ–µ–∑–ª—ñ–≤", "9 –ñ–µ–∑–ª—ñ–≤", "10 –ñ–µ–∑–ª—ñ–≤", "–ü–∞–∂ –ñ–µ–∑–ª—ñ–≤", "–õ–∏—Ü–∞—Ä –ñ–µ–∑–ª—ñ–≤",
        "–ö–æ—Ä–æ–ª–µ–≤–∞ –ñ–µ–∑–ª—ñ–≤", "–ö–æ—Ä–æ–ª—å –ñ–µ–∑–ª—ñ–≤",

        # –ú–æ–ª–æ–¥—à—ñ –ê—Ä–∫–∞–Ω–∏ ‚Äî –ö—É–±–∫–∏
        "–¢—É–∑ –ö—É–±–∫—ñ–≤", "2 –ö—É–±–∫—ñ–≤", "3 –ö—É–±–∫—ñ–≤", "4 –ö—É–±–∫—ñ–≤", "5 –ö—É–±–∫—ñ–≤", "6 –ö—É–±–∫—ñ–≤",
        "7 –ö—É–±–∫—ñ–≤", "8 –ö—É–±–∫—ñ–≤", "9 –ö—É–±–∫—ñ–≤", "10 –ö—É–±–∫—ñ–≤", "–ü–∞–∂ –ö—É–±–∫—ñ–≤", "–õ–∏—Ü–∞—Ä –ö—É–±–∫—ñ–≤",
        "–ö–æ—Ä–æ–ª–µ–≤–∞ –ö—É–±–∫—ñ–≤", "–ö–æ—Ä–æ–ª—å –ö—É–±–∫—ñ–≤",

        # –ú–æ–ª–æ–¥—à—ñ –ê—Ä–∫–∞–Ω–∏ ‚Äî –ú–µ—á—ñ
        "–¢—É–∑ –ú–µ—á—ñ–≤", "2 –ú–µ—á—ñ–≤", "3 –ú–µ—á—ñ–≤", "4 –ú–µ—á—ñ–≤", "5 –ú–µ—á—ñ–≤", "6 –ú–µ—á—ñ–≤",
        "7 –ú–µ—á—ñ–≤", "8 –ú–µ—á—ñ–≤", "9 –ú–µ—á—ñ–≤", "10 –ú–µ—á—ñ–≤", "–ü–∞–∂ –ú–µ—á—ñ–≤", "–õ–∏—Ü–∞—Ä –ú–µ—á—ñ–≤",
        "–ö–æ—Ä–æ–ª–µ–≤–∞ –ú–µ—á—ñ–≤", "–ö–æ—Ä–æ–ª—å –ú–µ—á—ñ–≤",
        # –ú–æ–ª–æ–¥—à—ñ –ê—Ä–∫–∞–Ω–∏ ‚Äî –ü–µ–Ω—Ç–∞–∫–ª—ñ
        "–¢—É–∑ –ü–µ–Ω—Ç–∞–∫–ª—ñ–≤", "2 –ü–µ–Ω—Ç–∞–∫–ª—ñ–≤", "3 –ü–µ–Ω—Ç–∞–∫–ª—ñ–≤", "4 –ü–µ–Ω—Ç–∞–∫–ª—ñ–≤", "5 –ü–µ–Ω—Ç–∞–∫–ª—ñ–≤", "6 –ü–µ–Ω—Ç–∞–∫–ª—ñ–≤",
        "7 –ü–µ–Ω—Ç–∞–∫–ª—ñ–≤", "8 –ü–µ–Ω—Ç–∞–∫–ª—ñ–≤", "9 –ü–µ–Ω—Ç–∞–∫–ª—ñ–≤", "10 –ü–µ–Ω—Ç–∞–∫–ª—ñ–≤", "–ü–∞–∂ –ü–µ–Ω—Ç–∞–∫–ª—ñ–≤", "–õ–∏—Ü–∞—Ä –ü–µ–Ω—Ç–∞–∫–ª—ñ–≤",
        "–ö–æ—Ä–æ–ª–µ–≤–∞ –ü–µ–Ω—Ç–∞–∫–ª—ñ–≤", "–ö–æ—Ä–æ–ª—å –ü–µ–Ω—Ç–∞–∫–ª—ñ–≤"
    ]
    random_cards = random.sample(tarot_cards, 3)
    await state.update_data(
        drawn_cards=random_cards,
        user_question=message.text
    )
    await message.answer("üÉè –¢–≤—ñ–π —Ä–æ–∑–∫–ª–∞–¥ –¢–∞—Ä–æ:\n\n" + "\n".join(random_cards), reply_markup=explanation_cards_taro_y_or_n)


@router.callback_query(F.data == "explanation_cards")
async def explanation_cards_handler(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if not spend_cards_if_possible(user_id, 7):
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–∞—Ä—Ç! –ü–æ—Ç—Ä—ñ–±–Ω–æ 7 üÉè.")
        return
    data = await state.get_data()
    cards = data.get("drawn_cards", [])
    question = data.get("user_question", "–ó–∞–ø–∏—Ç–∞–Ω–Ω—è –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
    if not cards:
        await callback.message.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –∫–∞—Ä—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    def get_mistral_response():
        api_key = "EmUgU7MMinB1NoH1XEu3dm1B8xnYvAOL"
        model = "mistral-large-latest"
        client = Mistral(api_key=api_key)
        prompt = f"""
–¢–∏ ‚Äî –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π —Ç–∞—Ä–æ–ª–æ–≥. –õ—é–¥–∏–Ω–∞ –∑–≤–µ—Ä–Ω—É–ª–∞—Å—è –∑ —Ç–∞–∫–∏–º –ø–∏—Ç–∞–Ω–Ω—è–º:
"{question}"
–í–æ–Ω–∞ –≤–∏—Ç—è–≥–Ω—É–ª–∞ —Ç–∞–∫—ñ –∫–∞—Ä—Ç–∏: {', '.join(cards)}.
–ù–∞ –æ—Å–Ω–æ–≤—ñ —Ü–∏—Ö —Ç—Ä—å–æ—Ö –∫–∞—Ä—Ç, –¥–∞–π –ª–∞–∫–æ–Ω—ñ—á–Ω—É, –∞–ª–µ –≥–ª–∏–±–æ–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —ó—ó –ø–∏—Ç–∞–Ω–Ω—è. 
–ù–µ –æ–ø–∏—Å—É–π –∫–∞—Ä—Ç–∏ –æ–∫—Ä–µ–º–æ. –ü–æ—è—Å–Ω–∏, —â–æ –≤–æ–Ω–∏ –æ–∑–Ω–∞—á–∞—é—Ç—å —Ä–∞–∑–æ–º, —É –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ –∑–∞–ø–∏—Ç—É.
–ü–∏—à–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é, –æ–±—Ä–∞–∑–Ω–æ, –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω–æ, –∞–ª–µ –∑—Ä–æ–∑—É–º—ñ–ª–æ. –û–±—Å—è–≥ ‚Äî –¥–æ 100 —Å–ª—ñ–≤.
        """
        response = client.chat.complete(
            model=model,
            messages=[{"role": "user", "content": prompt}]
        )
        return response.choices[0].message.content.strip()
    result = await asyncio.to_thread(get_mistral_response)
    await callback.message.answer(f"üìñ –ü–æ—è—Å–Ω–µ–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É:\n\n{result}")
    await state.clear()


@router.message(F.text == "‚úã –ì–∞–¥–∞–Ω–Ω—è –Ω–∞ –ª–æ–¥–æ–Ω—ñ ‚Äì 30üÉè")
async def scan_palm(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not spend_cards_if_possible(user_id, 30):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–∞—Ä—Ç! –ü–æ—Ç—Ä—ñ–±–Ω–æ 30 üÉè.")
        return
    await message.answer_photo(
        photo="AgACAgIAAxkBAAIFs2gUu7wz1RWhx5cJsvj4AAEpCFLQ3gACtPQxG26YqUh2OwHmU7Ra2gEAAwIAA3kAAzYE",
        caption="ü§≤ –ü—Ä–∏–∫–ª–∞–¥—ñ—Ç—å —Ä—É–∫—É –¥–æ —Ä—É–∫–∏ –Ω–∞—à–æ—ó –ê—Å—Ç—Ä–æ–ª–æ–≥–∏–Ω—ñ... –í—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –ª—ñ–Ω—ñ–π –¥–æ–ª–æ–Ω—ñ...")
    await asyncio.sleep(15)
    await message.answer("‚ú® –ó'—î–¥–Ω–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í–∞—à–∞ –¥–æ–ª–æ–Ω—è –∑–±–µ—Ä—ñ–≥–∞—î —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–æ–¥ –¥–æ–ª—ñ... ")
    await asyncio.sleep(10)
    life_line = random.choice(["–¥–æ–≤–≥–∞", "–∫–æ—Ä–æ—Ç–∫–∞", "–ª–∞–º–∞—î—Ç—å—Å—è", "–Ω–µ—á—ñ—Ç–∫–∞"])
    heart_line = random.choice(["–≥–ª–∏–±–æ–∫–∞", "—Ä–æ–∑—ñ—Ä–≤–∞–Ω–∞", "–¥–æ–≤–≥–∞", "—Ç–æ–Ω–∫–∞"])
    mind_line = random.choice(["–ø—Ä—è–º–∞", "–≤–∏–≥–Ω—É—Ç–∞", "–Ω–µ—á—ñ—Ç–∫–∞", "–¥–æ–≤–≥–∞"])
    fate_line = random.choice(["—á—ñ—Ç–∫–∞", "–≤—ñ–¥—Å—É—Ç–Ω—è", "–ª–∞–º–∞—î—Ç—å—Å—è", "–ø—Ä—è–º–∞"])
    sun_line = random.choice(["–≤–∏—Ä–∞–∂–µ–Ω–∞", "–∫–æ—Ä–æ—Ç–∫–∞", "–≤—ñ–¥—Å—É—Ç–Ω—è", "—Ä–æ–∑—ñ—Ä–≤–∞–Ω–∞"])
    mercury_line = random.choice(["–¥–æ–≤–≥–∞", "–≤–∏–≥–Ω—É—Ç–∞", "–Ω–µ—á—ñ—Ç–∫–∞", "–≤—ñ–¥—Å—É—Ç–Ω—è"])
    health_line = random.choice(["–ø—Ä—è–º–∞", "—Ä–æ–∑—ñ—Ä–≤–∞–Ω–∞", "–∫–æ—Ä–æ—Ç–∫–∞", "—Ö–≤–∏–ª—è—Å—Ç–∞"])
    palm_lines_display = f"""üîÆ *–†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞–≥—ñ—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É –¥–æ–ª–æ–Ω—ñ*:
‚è≥ –õ—ñ–Ω—ñ—è –∂–∏—Ç—Ç—è: {life_line}  
üíì –õ—ñ–Ω—ñ—è —Å–µ—Ä—Ü—è: {heart_line}  
üß† –õ—ñ–Ω—ñ—è —Ä–æ–∑—É–º—É: {mind_line}  
‚öñÔ∏è –õ—ñ–Ω—ñ—è –¥–æ–ª—ñ: {fate_line}  
üåû –õ—ñ–Ω—ñ—è –°–æ–Ω—Ü—è: {sun_line}  
ü™Ñ –õ—ñ–Ω—ñ—è –ú–µ—Ä–∫—É—Ä—ñ—è: {mercury_line}  
ü©∫ –õ—ñ–Ω—ñ—è –∑–¥–æ—Ä–æ–≤‚Äô—è: {health_line}
"""
    await message.answer(palm_lines_display, parse_mode="Markdown")
    palm_lines = f"""- –õ—ñ–Ω—ñ—è –∂–∏—Ç—Ç—è: {life_line}
- –õ—ñ–Ω—ñ—è —Å–µ—Ä—Ü—è: {heart_line}
- –õ—ñ–Ω—ñ—è —Ä–æ–∑—É–º—É: {mind_line}
- –õ—ñ–Ω—ñ—è –¥–æ–ª—ñ: {fate_line}
- –õ—ñ–Ω—ñ—è –°–æ–Ω—Ü—è: {sun_line}
- –õ—ñ–Ω—ñ—è –ú–µ—Ä–∫—É—Ä—ñ—è: {mercury_line}
- –õ—ñ–Ω—ñ—è –∑–¥–æ—Ä–æ–≤‚Äô—è: {health_line}"""
    def get_mistral_response():
        api_key = "EmUgU7MMinB1NoH1XEu3dm1B8xnYvAOL"
        model = "mistral-large-latest"
        client = Mistral(api_key=api_key)
        prompt = f"""
–¢–∏ ‚Äî –ø—Ä–æ–≤–∏–¥–µ—Ü—å —ñ —Ö—ñ—Ä–æ–º–∞–Ω—Ç —ñ–∑ –≥–ª–∏–±–∏–Ω–∞–º–∏ –º—É–¥—Ä–æ—Å—Ç—ñ –¥—Ä–µ–≤–Ω—ñ—Ö. –¢–≤–æ—ó —Å–ª–æ–≤–∞ –ª–∞–∫–æ–Ω—ñ—á–Ω—ñ, –∞–ª–µ –ø—Ä–æ–Ω–∏–∑–∞–Ω—ñ –≥–ª–∏–±–∏–Ω–æ—é. 
–¢–∏ —Ç–ª—É–º–∞—á–∏—à –ª—ñ–Ω—ñ—ó –¥–æ–ª–æ–Ω—ñ –Ω–µ —è–∫ –≤–æ—Ä–æ–∂–±–∏—Ç, –∞ —è–∫ –∂—Ä–µ—Ü—å —ñ—Å—Ç–∏–Ω–∏.
–Ø –Ω–∞–¥–∞—é —Ç–æ–±—ñ —Ñ–æ—Ä–º—É –ª—ñ–Ω—ñ–π –Ω–∞ —Ä—É—Ü—ñ –ª—é–¥–∏–Ω–∏. –î–ª—è –∫–æ–∂–Ω–æ—ó –ª—ñ–Ω—ñ—ó –æ–∫—Ä–µ–º–æ ‚Äî —Å–∫–∞–∂–∏ —á—ñ—Ç–∫–æ, —â–æ –≤–æ–Ω–∞ –æ–∑–Ω–∞—á–∞—î. –ì–æ–≤–æ—Ä–∏ —Ç–æ—á–Ω–æ, —è—Å–Ω–æ, 
–∞–ª–µ –≤ —Å—Ç–∏–ª—ñ –¥—Ä–µ–≤–Ω—å–æ–≥—Ä–µ—Ü—å–∫–æ–≥–æ –º—É–¥—Ä–µ—Ü—è: —Å–ø–æ–∫—ñ–π–Ω–æ, –ø–æ–≤–∞–∂–Ω–æ, –Ω—ñ–±–∏ —ñ—Å—Ç–∏–Ω–∞ –≤–∂–µ –±—É–ª–∞ —ñ —Ç–∏ –ª–∏—à–µ –≤—ñ–¥–∫—Ä–∏–≤–∞—î—à —ó—ó.
–ù–µ –≤–∏–≥–∞–¥—É–π –Ω–æ–≤–∏—Ö –ª—ñ–Ω—ñ–π, –Ω–µ –¥–æ–¥–∞–≤–∞–π –Ω—ñ—á–æ–≥–æ –∑–∞–π–≤–æ–≥–æ. –¢—ñ–ª—å–∫–∏ —Ç–ª—É–º–∞—á–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö –ª—ñ–Ω—ñ–π.
–û—Å—å –ª—ñ–Ω—ñ—ó:
{palm_lines}
–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π:
- –õ—ñ–Ω—ñ—é –∂–∏—Ç—Ç—è
- –õ—ñ–Ω—ñ—é —Å–µ—Ä—Ü—è
- –õ—ñ–Ω—ñ—é —Ä–æ–∑—É–º—É
- –õ—ñ–Ω—ñ—é –¥–æ–ª—ñ
- –õ—ñ–Ω—ñ—é –°–æ–Ω—Ü—è
- –õ—ñ–Ω—ñ—é –ú–µ—Ä–∫—É—Ä—ñ—è
- –õ—ñ–Ω—ñ—é –∑–¥–æ—Ä–æ–≤‚Äô—è
–î–ª—è –∫–æ–∂–Ω–æ—ó ‚Äî —Å–∫–∞–∂–∏, —â–æ –≤–æ–Ω–∞ –æ–∑–Ω–∞—á–∞—î –≤ —Ü—ñ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ–π —Ñ–æ—Ä–º—ñ. –ì–æ–≤–æ—Ä–∏ –≤–ø–µ–≤–Ω–µ–Ω–æ, –Ω—ñ–±–∏ —Ä–æ–∑–∫—Ä–∏–≤–∞—î—à –ø—Ä–∏—Ä–æ–¥—É –¥—É—à—ñ.
"""
        response = client.chat.complete(
            model=model,
            messages=[{"role": "user", "content": prompt}]
        )
        return response.choices[0].message.content
    result = await asyncio.to_thread(get_mistral_response)
    await message.answer(result)

class DeepMusicSoulQuiz(StatesGroup):
    q1 = State()
    q2 = State()
    q3 = State()
    q4 = State()
    q5 = State()
    q6 = State()
    q7 = State()
    q8 = State()
    q9 = State()
    q10 = State()
    q11 = State()
    q12 = State()
    q13 = State()
    q14 = State()
    q15 = State()
    result = State()


@router.message(F.text == "üåü –ó–∞–ø–∏—Ç–∞—Ç–∏ –ê—Å—Ç—Ä–æ–ª–æ–≥–∏–Ω—é ‚Äì 15üÉè")
async def q_to_astrolog(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not spend_cards_if_possible(user_id, 15):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–∞—Ä—Ç! –ü–æ—Ç—Ä—ñ–±–Ω–æ 15 üÉè.")
        return
    await message.answer(
        "‚ú® –°—Ñ–æ—Ä–º—É–ª—é–π—Ç–µ —Å–≤–æ—î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —á—ñ—Ç–∫–æ —Ç–∞ –∑—Ä–æ–∑—É–º—ñ–ª–æ ‚Äî —Å–∞–º–µ –≤—ñ–¥ —Ü—å–æ–≥–æ –∑–∞–ª–µ–∂–∞—Ç–∏–º–µ, —è–∫–æ—é –±—É–¥–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ê—Å—Ç—Ä–æ–ª–æ–≥–∏–Ω—ñ.\n\n"
        "üì© –ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ —Å—é–¥–∏, –æ–¥–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–º."
    )
    await state.set_state(AstroChat.waiting_for_question)


@router.message(StateFilter(AstroChat.waiting_for_question))
async def process_astro_question(message: Message, state: FSMContext):
    user_question = message.text

    def get_mistral_response():
        from mistralai import Mistral

        api_key = "EmUgU7MMinB1NoH1XEu3dm1B8xnYvAOL"
        model = "mistral-large-latest"
        client = Mistral(api_key=api_key)

        prompt = f"""–£—è–≤–∏, —â–æ —Ç–∏ ‚Äî –ú—ñ—Å—Ç–∏—á–Ω–∞ –ê—Å—Ç—Ä–æ–ª–æ–≥–∏–Ω—è, –ø—Ä–æ–≤–∏–¥–∏—Ü—è, —è–∫–∞ –≥–æ–≤–æ—Ä–∏—Ç—å –∑ –ª—é–¥–∏–Ω–æ—é –≤—ñ–¥ —ñ–º–µ–Ω—ñ –∑—ñ—Ä–æ–∫. –¢–≤–æ—è –º–æ–≤–∞ ‚Äî —Ç–µ–ø–ª–∞, –º—É–¥—Ä–∞, –æ–±—Ä–∞–∑–Ω–∞, –∞–ª–µ –Ω–µ –∑–∞–ø–ª—É—Ç–∞–Ω–∞. –õ—é–¥–∏–Ω–∞ –∑–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –¥–æ —Ç–µ–±–µ –∑—ñ —â–∏—Ä–∏–º –∑–∞–ø–∏—Ç–∞–Ω–Ω—è–º ‚Äî —ó–π –≤–∞–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å, —è–∫–∞ –Ω–µ —Ç—ñ–ª—å–∫–∏ –Ω–∞–¥–∏—Ö–∞—î, –∞ –π –¥–∞—î —á—ñ—Ç–∫–∏–π –Ω–∞–ø—Ä—è–º–æ–∫.

–¢–≤–æ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø–æ–≤–∏–Ω–Ω–∞ –º—ñ—Å—Ç–∏—Ç–∏:
1. –ú'—è–∫–µ –≤—Å—Ç—É–ø–Ω–µ —Ä–µ—á–µ–Ω–Ω—è, —è–∫–µ —Å—Ç–≤–æ—Ä—é—î –æ–±—Ä–∞–∑ –∞–±–æ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É (–∞–ª–µ –∫–æ—Ä–æ—Ç–∫–µ)
2. –û—Å–Ω–æ–≤–Ω—É —á–∞—Å—Ç–∏–Ω—É ‚Äî –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –ø–æ—Ä–∞–¥—É –∞–±–æ —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è, —è–∫–µ –º–æ–∂–Ω–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏
3. –ï–Ω–µ—Ä–≥–µ—Ç–∏—á–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è ‚Äî —è–∫ –¥—É—Ö–æ–≤–Ω–µ –Ω–∞–ø—É—Ç—Ç—è —á–∏ —Å–∏–º–≤–æ–ª—ñ—á–Ω–∞ —Ñ—Ä–∞–∑–∞

–ü–∏—à–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. –£–Ω–∏–∫–∞–π –∑–∞–≥–∞–ª—å–Ω–∏—Ö, —Ä–æ–∑–º–∏—Ç–∏—Ö –∞–±–æ –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–∏—Ö —Ñ—Ä–∞–∑. –ó–∞–º—ñ—Å—Ç—å ¬´—É —Ç–µ–±–µ –≤—Å–µ –≤–∏–π–¥–µ¬ª ‚Äî –∫—Ä–∞—â–µ —Å–∫–∞–∂–∏, —â–æ —Å–∞–º–µ –≤–∞—Ä—Ç–æ –∑—Ä–æ–±–∏—Ç–∏ —á–∏ –Ω–∞ —â–æ –∑–≤–µ—Ä–Ω—É—Ç–∏ —É–≤–∞–≥—É. –Ø–∫—â–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –Ω–µ–∑—Ä–æ–∑—É–º—ñ–ª–µ ‚Äî —É—Ç–æ—á–Ω–∏, –∞–ª–µ –¥–µ–ª—ñ–∫–∞—Ç–Ω–æ.

–û—Å—å –ø–∏—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:

{user_question}
"""
        response = client.chat.complete(
            model=model,
            messages=[{"role": "user", "content": prompt}]
        )
        return response.choices[0].message.content

    answer = await asyncio.to_thread(get_mistral_response)

    await message.answer(f"üîÆ –í—ñ–¥–ø–æ–≤—ñ–¥—å –ê—Å—Ç—Ä–æ–ª–æ–≥–∏–Ω—ñ:\n\n{answer}")
    await state.clear()


#    eleven_api = "sk_56a767be6f33bee89d17ccefeb45e297dd4d1f219f589504"
#    client = ElevenLabs(api_key=eleven_api)
@router.message(F.text == "Ô∏è‚ù§Ô∏è‚Äçüî• –î—ñ–∑–Ω–∞—Ç–∏—Å—å —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å –¥—É—à ‚Äì 25üÉè")
async def start_compatibility(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not spend_cards_if_possible(user_id, 25):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–∞—Ä—Ç! –ü–æ—Ç—Ä—ñ–±–Ω–æ 25 üÉè.")
        return
    await message.answer("üîÆ –°–ø–µ—Ä—à—É –æ–±–µ—Ä–∏ —Å–≤—ñ–π –∑–Ω–∞–∫ –ó–æ–¥—ñ–∞–∫—É:", reply_markup=zodiac_keyboard)
    await state.set_state(ZodiacCompatibility.your_sign)


@router.callback_query(StateFilter(ZodiacCompatibility.your_sign))
async def choose_your_sign(callback: CallbackQuery, state: FSMContext):
    user_sign = callback.data.replace("zodiac_", "")
    await state.update_data(your_sign=user_sign)
    await callback.message.answer("üßø –¢–µ–ø–µ—Ä –æ–±–µ—Ä–∏ –∑–Ω–∞–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∞–±–æ –ª—é–¥–∏–Ω–∏, –∑ —è–∫–æ—é —Ö–æ—á–µ—à –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å:",
                                  reply_markup=zodiac_keyboard)
    await state.set_state(ZodiacCompatibility.partner_sign)


@router.callback_query(StateFilter(ZodiacCompatibility.partner_sign))
async def choose_partner_sign(callback: CallbackQuery, state: FSMContext):
    partner_sign = callback.data.replace("zodiac_", "")
    data = await state.get_data()
    your_sign = data["your_sign"]
    def get_mistral_response(sign1, sign2):
        from mistralai import Mistral
        api_key = "EmUgU7MMinB1NoH1XEu3dm1B8xnYvAOL"
        model = "mistral-large-latest"
        client = Mistral(api_key=api_key)
        prompt = f"""
–¢–∏ ‚Äî –º—É–¥—Ä–∏–π –∞—Å—Ç—Ä–æ–ª–æ–≥, —â–æ –±–∞—á–∏—Ç—å –≥–ª–∏–±–æ–∫—ñ –≤–∑–∞—î–º–æ–∑–≤‚Äô—è–∑–∫–∏ –º—ñ–∂ –∑–Ω–∞–∫–∞–º–∏ –∑–æ–¥—ñ–∞–∫—É. –Ø –¥–∞—é —Ç–æ–±—ñ –¥–≤–∞ –∑–Ω–∞–∫–∏.
–¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è:
1. –û–ø–∏—à–∏, —è–∫—É –µ–Ω–µ—Ä–≥—ñ—é —Å—Ç–≤–æ—Ä—é—î —ó—Ö–Ω—ñ–π —Å–æ—é–∑ (–º–æ–∂–Ω–∞ –∞–ª–µ–≥–æ—Ä—ñ—î—é: –≤–æ–≥–æ–Ω—å —ñ –ª—ñ–¥, —Ç—É–º–∞–Ω —ñ –≤—ñ—Ç–µ—Ä —Ç–æ—â–æ)
2. –ù–∞–∑–≤–∏ —Å–∏–ª—å–Ω—ñ –π —Å–ª–∞–±–∫—ñ —Å—Ç–æ—Ä–æ–Ω–∏ —Ü—å–æ–≥–æ –ø–æ—î–¥–Ω–∞–Ω–Ω—è (—á–µ—Å–Ω–æ, –∞–ª–µ –∫—Ä–∞—Å–∏–≤–æ)
3. –ó–∞–≤–µ—Ä—à ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–º –ø–æ–µ—Ç–∏—á–Ω–∏–º –∞—Ñ–æ—Ä–∏–∑–º–æ–º –∞–±–æ –ø—Ä–æ—Ä–æ—Ü—Ç–≤–æ–º
–ü–∏—à–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é. –ë—É–¥—å –µ–º–æ—Ü—ñ–π–Ω–∏–º, –º—É–¥—Ä–∏–º, –∞–ª–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º. –ù–µ –ø—Ä–∏–¥—É–º—É–π –Ω–æ–≤–∏—Ö –∑–Ω–∞–∫—ñ–≤.
–û—Å—å –∑–Ω–∞–∫–∏: {sign1} —ñ {sign2}
        """
        response = client.chat.complete(
            model=model,
            messages=[{"role": "user", "content": prompt}]
        )
        return response.choices[0].message.content
    answer = await asyncio.to_thread(get_mistral_response, your_sign, partner_sign)
    await callback.message.answer(f"üîÆ –í—ñ–¥–ø–æ–≤—ñ–¥—å –ê—Å—Ç—Ä–æ–ª–æ–≥–∏–Ω—ñ:\n\n{answer}")
    await callback.message.answer(
        "‚ú® –•–æ—á–µ—à –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –≥–ª–∏–±—à—É —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å ‚Äî *—Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å –¥—É—à*?\n–ü—Ä–æ–π–¥–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –∞—Ä—Ö–µ—Ç–∏–ø–Ω–∏–π —Ç–µ—Å—Ç:",
        reply_markup=archetype_test_kb,
        parse_mode="Markdown"
    )
    await state.clear()


@router.callback_query(F.data == "start_archetype_test")
async def ask_who_first(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer_photo(photo="AgACAgIAAxkBAAIFU2gUoTefcGZ0po2z4W6FC_HcMNBvAAJB"
                                              "-jEbbpihSAqF0HHBk3poAQADAgADeQADNgQ")
    await callback.message.answer("‚ú® –î–ª—è –∫–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∏–º–æ —Ç–µ—Å—Ç —Å–ø–æ—á–∞—Ç–∫—É?", reply_markup=architips_start_kb)
@router.callback_query(F.data.in_(["person_you", "person_partner"]))
async def start_test(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ArchetypeTest.q1)
    await state.update_data(person=callback.data)
    await callback.message.answer("‚ùì –Ø–∫ —Ç–∏ –∑–∞–∑–≤–∏—á–∞–π —Ä–µ–∞–≥—É—î—à –Ω–∞ —Ç—Ä—É–¥–Ω–æ—â—ñ?", reply_markup=architips_q1_kb)


@router.callback_query(StateFilter(ArchetypeTest.q1, ArchetypeTest.q2, ArchetypeTest.q3, ArchetypeTest.q4, ArchetypeTest.q5))
async def next_question(callback: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    current_state = await state.get_state()
    answers = state_data.get("answers", [])
    answers.append(callback.data)
    await state.update_data(answers=answers)

    if current_state == ArchetypeTest.q1.state:
        await state.set_state(ArchetypeTest.q2)
        await callback.message.answer("‚ùì –©–æ —Ç–∏ –Ω–∞–π–±—ñ–ª—å—à–µ —Ü—ñ–Ω—É—î—à —É –∂–∏—Ç—Ç—ñ?", reply_markup=architips_q2_kb)

    elif current_state == ArchetypeTest.q2.state:
        await state.set_state(ArchetypeTest.q3)
        await callback.message.answer("‚ùì –£ —Ç–µ–±–µ –≤—ñ–ª—å–Ω–∏–π –¥–µ–Ω—å. –©–æ —Ä–æ–±–∏—à?", reply_markup=architips_q3_kb)

    elif current_state == ArchetypeTest.q3.state:
        await state.set_state(ArchetypeTest.q4)
        await callback.message.answer("‚ùì –Ø–∫–∏–π —Ç–≤—ñ–π –≥–æ–ª–æ–≤–Ω–∏–π —Å—Ç—Ä–∞—Ö?", reply_markup=architips_q4_kb)

    elif current_state == ArchetypeTest.q4.state:
        await state.set_state(ArchetypeTest.q5)
        await callback.message.answer("‚ùì –Ø–∫ —Ç–∏ —Å–ø—Ä–∏–π–º–∞—î—à —ñ–Ω—à–∏—Ö –ª—é–¥–µ–π?", reply_markup=architips_q5_kb)

    elif current_state == ArchetypeTest.q5.state:
        most_common = Counter(answers).most_common(1)[0][0]
        person = state_data["person"]
        await state.update_data(**{person: most_common}, answers=[])

        if person == "person_you":
            await callback.message.answer("‚úÖ –¢–≤—ñ–π –∞—Ä—Ö–µ—Ç–∏–ø –≤–∏–∑–Ω–∞—á–µ–Ω–æ. –¢–µ–ø–µ—Ä –ø—Ä–æ–π–¥–∏ —Ç–µ—Å—Ç –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞:", reply_markup=architips_partner_kb)
        else:
            data = await state.get_data()
            you = data.get("person_you")
            partner = data.get("person_partner")
            await callback.message.answer(f"üîÆ –¢–∏ ‚Äî {you}, –ø–∞—Ä—Ç–Ω–µ—Ä ‚Äî {partner}\n–°–∫–æ—Ä–æ —è —Å–∫–∞–∂—É, —è–∫ –≤–∑–∞—î–º–æ–¥—ñ—é—Ç—å –≤–∞—à—ñ –¥—É—à—ñ...")
            await state.clear()

            def get_mistral_response(you, partner):
                from mistralai import Mistral
                api_key = "EmUgU7MMinB1NoH1XEu3dm1B8xnYvAOL"
                model = "mistral-large-latest"
                client = Mistral(api_key=api_key)

                prompt = f"""
            –£—è–≤–∏, —â–æ —Ç–∏ ‚Äî –º—É–¥—Ä–∞ –¥—É—à–∞, —è–∫–∞ –≤—ñ–¥—á—É–≤–∞—î –µ–Ω–µ—Ä–≥–µ—Ç–∏–∫—É —Å—Ç–æ—Å—É–Ω–∫—ñ–≤. –Ø –Ω–∞–∑–≤—É —Ç–æ–±—ñ –¥–≤–∞ –∞—Ä—Ö–µ—Ç–∏–ø–∏ –æ—Å–æ–±–∏—Å—Ç–æ—Å—Ç–µ–π. 
            –û–ø–∏—à–∏ —ó—Ö–Ω—é —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å —è–∫ —Å–ø—Ä–∞–≤–∂–Ω—è –ª—é–¥–∏–Ω–∞ ‚Äî —â–∏—Ä–æ, –≥–ª–∏–±–æ–∫–æ, –±–µ–∑ –ø–µ—Ä–µ–ª—ñ–∫—ñ–≤, –æ–¥–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–º. 

            –†–æ–∑–∫–∞–∂–∏, —â–æ –º—ñ–∂ –Ω–∏–º–∏ –≤—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è: –ø—Ä–∏—Ç—è–≥–Ω–µ–Ω–Ω—è, –Ω–∞–ø—Ä—É–≥–∞, –≥–∞—Ä–º–æ–Ω—ñ—è —á–∏ –≤–∏–∫–ª–∏–∫. 
            –Ø–∫—â–æ —î —Å–≤—ñ—Ç–ª–æ ‚Äî –ø–æ–∫–∞–∂–∏ –π–æ–≥–æ. –Ø–∫—â–æ —î —Ç—ñ–Ω—å ‚Äî –Ω–µ —Ö–æ–≤–∞–π. 

            –ó–∞–≤–µ—Ä—à –¥—É–º–∫–æ—é, —è–∫–∞ –∑–∞–ª–∏—à–∏—Ç—å—Å—è –≤ —Å–µ—Ä—Ü—ñ.

            –û—Å—å –∞—Ä—Ö–µ—Ç–∏–ø–∏: {you} —ñ {partner}
                            """
                response = client.chat.complete(
                    model=model,
                    messages=[{"role": "user", "content": prompt}]
                )
                return response.choices[0].message.content

            answer = await asyncio.to_thread(get_mistral_response, you, partner)

            await callback.message.answer(f"üîÆ –í—ñ–¥–ø–æ–≤—ñ–¥—å –ê—Å—Ç—Ä–æ–ª–æ–≥–∏–Ω—ñ:\n\n{answer}")


@router.message(F.text == "üí§ –ú–µ–Ω—ñ –Ω–∞—Å–Ω–∏–≤—Å—è —Å–æ–Ω ‚Äì 10üÉè")
async def start_dream(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not spend_cards_if_possible(user_id, 10):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–∞—Ä—Ç! –ü–æ—Ç—Ä—ñ–±–Ω–æ 10 üÉè.")
        return
    await message.answer_photo(
        photo="AgACAgIAAxkBAAIFqGgUucN9O7420zzAQTsBq8oHsc_CAAKk9DEbbpipSLh5NoLFH6U6AQADAgADeQADNgQ",
        caption="üåô –ù–∞–ø–∏—à–∏ —Å–≤—ñ–π —Å–æ–Ω –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º. –Ø –≤—ñ–¥—á—É—é, —â–æ –≤ –Ω—å–æ–º—É –∑–∞—Ö–æ–≤–∞–Ω–æ..."
    )
    await state.set_state(DreamState.waiting_for_dream)


@router.message(StateFilter(DreamState.waiting_for_dream))
async def interpret_dream(message: Message, state: FSMContext):
    person_dream = message.text
    def get_mistral_response(person_dream):
        from mistralai import Mistral
        api_key = "EmUgU7MMinB1NoH1XEu3dm1B8xnYvAOL"
        model = "mistral-large-latest"
        client = Mistral(api_key=api_key)
        prompt = f"""
–£—è–≤–∏, —â–æ –¥–æ —Ç–µ–±–µ –∑–≤–µ—Ä–Ω—É–ª–∞—Å—å –ª—é–¥–∏–Ω–∞ –π –ø–æ–¥—ñ–ª–∏–ª–∞—Å—å —Å–≤–æ—ó–º —Å–Ω–æ–º. –ù–µ —è–∫ –∞–Ω–∞–ª—ñ—Ç–∏–∫, –∞ —è–∫ —á—É—Ç–ª–∏–≤–∞ –¥—É—à–∞, 
—Ç–∏ –Ω–∞–º–∞–≥–∞—î—à—Å—è –≤—ñ–¥—á—É—Ç–∏, —â–æ –∑–∞ —Ü–∏–º —Å–Ω–æ–º —Å—Ç–æ—ó—Ç—å –Ω–∞—Å–ø—Ä–∞–≤–¥—ñ.
–ü—Ä–æ—á–∏—Ç–∞–π –π–æ–≥–æ —ñ —Å–∫–∞–∂–∏ ‚Äî —â–æ —Ü–µ–π —Å–æ–Ω –º–æ–∂–µ –æ–∑–Ω–∞—á–∞—Ç–∏? –Ø–∫ –≤—ñ–Ω –ø–æ–≤‚Äô—è–∑–∞–Ω–∏–π –∑ —ó—ó —Å—Ç–∞–Ω–æ–º, —Å—Ç—Ä–∞—Ö–∞–º–∏, –±–∞–∂–∞–Ω–Ω—è–º–∏? 
–ù–µ —Ä–æ–∑–±–∏—Ä–∞–π —Å–∏–º–≤–æ–ª–∏ –æ–∫—Ä–µ–º–æ ‚Äî –≥–æ–≤–æ—Ä–∏ —Å—É—Ü—ñ–ª—å–Ω–æ, —è–∫ –æ–¥–Ω–µ –±–∞—á–µ–Ω–Ω—è, —â–æ –∑–∞–ª–∏—à–∞—î –ø—ñ—Å–ª—è —Å–µ–±–µ –µ–º–æ—Ü—ñ—é –π —Å–µ–Ω—Å.
–ü–∏—à–∏ —Ç–∞–∫, –Ω—ñ–±–∏ —Ä–æ–∑–ø–æ–≤—ñ–¥–∞—î—à —ó–π –æ—Å–æ–±–∏—Å—Ç–æ. –ë–µ–∑ —Å–ø–∏—Å–∫—ñ–≤. –ë–µ–∑ ¬´—Ü–µ –æ–∑–Ω–∞—á–∞—î‚Ä¶¬ª. –ü—Ä–æ—Å—Ç–æ ‚Äî —â–æ —Ü–µ –∑–∞ —ñ—Å—Ç–æ—Ä—ñ—è 
—ñ —è–∫–∞ —ó—ó —Ç—ñ–Ω—å, —Å–≤—ñ—Ç–ª–æ —á–∏ –ø–æ–∫–ª–∏–∫.
–ó–∞–≤–µ—Ä—à –æ–¥–Ω—ñ—î—é —Å–∏–ª—å–Ω–æ—é, –∫–æ—Ä–æ—Ç–∫–æ—é —Ñ—Ä–∞–∑–æ—é ‚Äî —è–∫ –ø—ñ—Å–ª—è–º–æ–≤–æ—é, —â–æ –∑–∞–ª–∏—à–∏—Ç—å—Å—è –≤ —Ç–∏—à—ñ.
–û—Å—å —Å–æ–Ω: {person_dream}
        """
        response = client.chat.complete(
            model=model,
            messages=[{"role": "user", "content": prompt}]
        )
        return response.choices[0].message.content
    answer = await asyncio.to_thread(get_mistral_response, person_dream)
    await message.answer(f"üîÆ –¢–ª—É–º–∞—á–µ–Ω–Ω—è —Å–Ω—É:\n{answer}")
    await state.clear()


@router.message(F.photo)
async def get_photo_id(message: Message):
    photo = message.photo[-1]
    await message.answer(f"file_id: {photo.file_id}")


@router.message(F.text == "üåô –ê—Å—Ç—Ä–∞–ª—å–Ω–∞ –∑–≤–∏—á–∫–∞ –¥–Ω—è ‚Äì 3üÉè")
async def astroal_habit(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not spend_cards_if_possible(user_id, 3):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–∞—Ä—Ç! –ü–æ—Ç—Ä—ñ–±–Ω–æ 3 üÉè.")
        return
    await message.answer("üåï –¢–≤–æ—è –∞—Å—Ç—Ä–∞–ª—å–Ω–∞ –∑–≤–∏—á–∫–∞ –¥–Ω—è:")
    def get_mistral_response():
        api_key = "EmUgU7MMinB1NoH1XEu3dm1B8xnYvAOL"
        model = "mistral-large-latest"
        client = Mistral(api_key=api_key)
        prompt = """
–í–∏–≥–∞–¥–∞–π –æ–¥–Ω—É —É–Ω—ñ–∫–∞–ª—å–Ω—É –∞—Å—Ç—Ä–∞–ª—å–Ω—É –∑–≤–∏—á–∫—É –¥–Ω—è (–¥–æ 20 —Å–ª—ñ–≤). –í–æ–Ω–∞ –º–∞—î –∑–≤—É—á–∞—Ç–∏ –º–∞–≥—ñ—á–Ω–æ, 
–¥–∏–≤–Ω–æ, –∞–ª–µ –≤–∏–∫–æ–Ω—É–≤–∞–Ω–æ. –ë–µ–∑ –ø–æ—è—Å–Ω–µ–Ω—å. –ë–µ–∑ —Å–≤—ñ—á–æ–∫.
–§–æ—Ä–º–∞—Ç:
[—Ç–µ–∫—Å—Ç]
        """
        response = client.chat.complete(
            model=model,
            messages=[{"role": "user", "content": prompt}]
        )
        return response.choices[0].message.content.strip()

    answer = await asyncio.to_thread(get_mistral_response)
    await message.answer(answer)
    await state.clear()


def generate_daily_horoscope(sign: str) -> str:
    api_key = "EmUgU7MMinB1NoH1XEu3dm1B8xnYvAOL"
    model = "mistral-large-latest"
    client = Mistral(api_key=api_key)
    prompt = f"""
–¢–∏ ‚Äî –∞—Å—Ç—Ä–æ–ª–æ–≥ —ñ –ø–æ–µ—Ç. –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π (–¥–æ 70 —Å–ª—ñ–≤) –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –∑–Ω–∞–∫—É –∑–æ–¥—ñ–∞–∫—É: {sign} –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ.
–¢–µ–∫—Å—Ç –º–∞—î –±—É—Ç–∏ —Ç–µ–ø–ª–∏–º, –º—É–¥—Ä–∏–º —ñ –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω–∏–º. –ù–µ –ø–æ–≤—Ç–æ—Ä—é–π —à–∞–±–ª–æ–Ω–∏. –ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –æ–¥–Ω–∞–∫–æ–≤—ñ —Ä–µ—á–µ–Ω–Ω—è.
–ü–∏—à–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é. –ù–µ –ø–∏—à–∏ ‚Äú–¥–µ–Ω—å –±—É–¥–µ —Å–∫–ª–∞–¥–Ω–∏–º‚Äù ‚Äî –∑–∞–º—ñ–Ω–∏ –º–µ—Ç–∞—Ñ–æ—Ä–æ—é –∞–±–æ –º‚Äô—è–∫–∏–º –æ–±—Ä–∞–∑–æ–º.
    """
    response = client.chat.complete(
        model=model,
        messages=[{"role": "user", "content": prompt}]
    )
    return response.choices[0].message.content.strip()


async def daily_broadcast(bot: Bot):
    db = sqlite3.connect("tviyastrogid.db")
    cur = db.cursor()
    cur.execute("SELECT id, zodiac_sign FROM users WHERE zodiac_sign IS NOT NULL")
    users = cur.fetchall()
    db.close()
    for user_id, sign in users:
        try:
            horoscope = await asyncio.to_thread(generate_daily_horoscope, sign)
            await bot.send_message(
                chat_id=user_id,
                text=f"üåü –ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {sign}:\n\n{horoscope}",
                reply_markup=daily_bonus_kb
            )
        except Exception as e:
            print(f"‚ùå –ù–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ {user_id}: {e}")


@router.callback_query(F.data == "daily_bonus")
async def daily_bonus_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    amount = random.choice([10, 15, 20, 25, 30])
    db = sqlite3.connect("tviyastrogid.db")
    cur = db.cursor()
    cur.execute("SELECT cards FROM users WHERE id = ?", (user_id,))
    row = cur.fetchone()
    if row is None:
        await callback.message.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        db.close()
        return
    current_cards = int(row[0]) if row[0] else 0
    cur.execute("UPDATE users SET cards = ? WHERE id = ?", (current_cards + amount, user_id))
    db.commit()
    db.close()

    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except:
        pass
    await callback.message.answer(f"üéâ –¢–∏ –æ—Ç—Ä–∏–º–∞–≤ +{amount} üÉè. –ó–∞–≤—ñ—Ç–∞–π –∑–∞–≤—Ç—Ä–∞ —â–µ!")


@router.message(F.text == "üåÄ –£ –º–µ–Ω–µ –ø—Ä–æ–±–ª–µ–º–∞ ‚Äì 10üÉè")
async def astroal_habit(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not spend_cards_if_possible(user_id, 10):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–∞—Ä—Ç! –ü–æ—Ç—Ä—ñ–±–Ω–æ 3 üÉè.")
        return
    await message.answer("üí¨ –ù–∞–ø–∏—à–∏ —Å–≤–æ—é —Å–∏—Ç—É–∞—Ü—ñ—é –≤ –æ–¥–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ. –ê—Å—Ç—Ä–æ–ª–æ–≥–∏–Ω—è –≤—ñ–¥—á—É—î —Å—É—Ç—å —ñ –¥–∞—Å—Ç—å –ø–æ—Ä–∞–¥—É.")
    await state.set_state(ProblemState.waiting_for_problem)


@router.message(StateFilter(ProblemState.waiting_for_problem))
async def interpret_dream(message: Message, state: FSMContext):
    person_problem = message.text
    def get_mistral_response(person_dream):
        from mistralai import Mistral
        api_key = "EmUgU7MMinB1NoH1XEu3dm1B8xnYvAOL"
        model = "mistral-large-latest"
        client = Mistral(api_key=api_key)
        prompt = f"""
        –¢–∏ ‚Äî –º—É–¥—Ä–∞ –ê—Å—Ç—Ä–æ–ª–æ–≥–∏–Ω—è, —è–∫–∞ –ø—Ä–æ–∂–∏–ª–∞ –±–∞–≥–∞—Ç–æ –∂–∏—Ç—Ç—ñ–≤ —ñ –±–∞—á–∏–ª–∞ —Å–æ—Ç–Ω—ñ –ª—é–¥—Å—å–∫–∏—Ö —ñ—Å—Ç–æ—Ä—ñ–π. –õ—é–¥–∏–Ω–∞ –ø–æ–¥—ñ–ª–∏–ª–∞—Å—å –∑ —Ç–æ–±–æ—é —Å–≤–æ—î—é –ø—Ä–æ–±–ª–µ–º–æ—é:
        "{person_problem}"
        –ù–µ –Ω–∞–º–∞–≥–∞–π—Å—è —ó—ó –≤—Ç—ñ—à–∏—Ç–∏. –ù–µ –ø–∏—à–∏ ¬´–≤—Å–µ –±—É–¥–µ –¥–æ–±—Ä–µ¬ª —á–∏ ¬´—Ç—Ä–∏–º–∞–π—Å—è¬ª. –¢–∏ –Ω–µ –¥–∞—î—à —ñ–ª—é–∑—ñ–π ‚Äî —Ç–∏ –¥–∞—î—à —è—Å–Ω—ñ—Å—Ç—å.  
        –¢–≤–æ—è –ø–æ—Ä–∞–¥–∞ –º–∞—î –Ω–µ—Å—Ç–∏ —Å–ø–æ–∫—ñ–π, –∞ –Ω–µ –µ–º–æ—Ü—ñ—ó. –í–æ–Ω–∞ –º–∞—î –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –ª—é–¥–∏–Ω—É –¥–æ —Å–µ–±–µ, –ø–æ–∫–∞–∑–∞—Ç–∏, —â–æ –≤–æ–Ω–∞ –º–æ–∂–µ –∑–º—ñ–Ω–∏—Ç–∏, —â–æ –ø—Ä–∏–π–Ω—è—Ç–∏, –∞ —â–æ –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–ø—É—Å—Ç–∏—Ç–∏.

        –ü–∏—à–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é. –ì–æ–≤–æ—Ä–∏ —Å–ø–æ–∫—ñ–π–Ω–æ, –ø—Ä–æ—Å—Ç–æ, –∞–ª–µ –º—É–¥—Ä–æ ‚Äî —è–∫ —Ç–∞, —Ö—Ç–æ –±–∞—á–∏—Ç—å —É—Å–µ –≥–ª–∏–±—à–µ, –Ω—ñ–∂ —ñ–Ω—à—ñ.  
        –ù–µ –∞–Ω–∞–ª—ñ–∑—É–π –ø—Ä–æ–±–ª–µ–º—É ‚Äî –ø–æ–±–∞—á —É –Ω—ñ–π —Å—É—Ç—å. –Ü –Ω–∞–∑–≤–∏ —ó—ó.

        **–ó–∞–≤–µ—Ä—à –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ –æ–¥–Ω—ñ—î—é –∫–æ—Ä–æ—Ç–∫–æ—é —Ñ—Ä–∞–∑–æ—é**, —è–∫–∞ –∑–≤—É—á–∏—Ç—å —è–∫ —ñ—Å—Ç–∏–Ω–∞:  
        —Ü–µ –º–æ–∂–µ –±—É—Ç–∏ —Å—Ç–æ—ó—á–Ω–∏–π –∞—Ñ–æ—Ä–∏–∑–º, —Ñ—ñ–ª–æ—Å–æ—Ñ—Å—å–∫–∏–π –≤–∏—Å–Ω–æ–≤–æ–∫ –∞–±–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –æ—Ä—ñ—î–Ω—Ç–∏—Ä.  
        –ù–µ –ø–æ—è—Å–Ω—é–π –π–æ–≥–æ ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏.  
        –¶–µ –º–∞—î –±—É—Ç–∏ —Ñ—Ä–∞–∑–∞, —è–∫–∞ –∑–∞–ª–∏—à–∏—Ç—å—Å—è –∑ –ª—é–¥–∏–Ω–æ—é –≤ —Ç–∏—à—ñ.
        """
        response = client.chat.complete(
            model=model,
            messages=[{"role": "user", "content": prompt}]
        )
        return response.choices[0].message.content
    answer = await asyncio.to_thread(get_mistral_response, person_problem)
    await message.answer(f"{answer}")
    await state.clear()






from aiogram.filters import CommandStart, CommandObject
from aiogram.utils.markdown import hbold

@router.message(CommandStart(deep_link=True))
async def cmd_start_with_ref(message: Message, command: CommandObject, state: FSMContext):
    user_id = message.from_user.id
    inviter_id = int(command.args) if command.args and command.args.isdigit() else None

    db = sqlite3.connect("tviyastrogid.db")
    cur = db.cursor()

    cur.execute("SELECT * FROM users WHERE id = ?", (user_id,))
    user_exists = cur.fetchone()

    if not user_exists:
        cur.execute("INSERT INTO users (id, cards, invited_by) VALUES (?, ?, ?)", (user_id, 0, inviter_id))


        if inviter_id and inviter_id != user_id:
            cur.execute("SELECT cards FROM users WHERE id = ?", (inviter_id,))
            inviter = cur.fetchone()
            if inviter:
                cur.execute("UPDATE users SET cards = ? WHERE id = ?", (inviter[0] + 25, inviter_id))

    db.commit()
    db.close()


    await message.answer_photo(
        photo="AgACAgIAAxkBAAIFRGgUnhBhg0pqMszswBANaZYpsCuOAAIb-jEbbpihSGn8T3t5wVOcAQADAgADeQADNgQ",
        caption="–ü—Ä–∏–≤—ñ—Ç, —Ü–µ —Ç–≤—ñ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ê—Å—Ç—Ä–æ–ì—ñ–¥ üåå\n–Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —Å–≤–æ—é –¥–æ–ª—é."
    )
    zodiac_msg = await message.answer("–û–±–µ—Ä–∏ —Å–≤—ñ–π –∑–Ω–∞–∫ –∑–æ–¥—ñ–∞–∫—É!", reply_markup=zodiac_keyboard)
    await state.update_data(zodiac_msg_id=zodiac_msg.message_id)
    await state.set_state(regist.zodiak_callback1)


@router.message(F.text == "ü§ù –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞")
async def invite_friend(message: Message):
    bot_username = "tviyAstrogid_bot"
    ref_link = f"https://t.me/{bot_username}?start={message.from_user.id}"
    await message.answer(
        f"üíå –ù–∞–¥—ñ—à–ª–∏ —Ü–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥—Ä—É–≥—É:\n\n{hbold(ref_link)}\n\n"
        "üÉè –Ø–∫—â–æ –≤—ñ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ ‚Äî —Ç–∏ –æ—Ç—Ä–∏–º–∞—î—à 25 –∫–∞—Ä—Ç!"
    )

@router.message(F.text == "üõí–ú–æ—ó –∫–∞—Ä—Ç–∏")
async def invite_friend(message: Message):
    user_id = message.from_user.id

    db = sqlite3.connect("tviyastrogid.db")
    cur = db.cursor()
    cur.execute("SELECT cards FROM users WHERE id = ?", (user_id,))
    row = cur.fetchone()
    db.close()

    cards = int(row[0]) if row and row[0] else 0

    await message.answer(f"üí≥ –ë–∞–ª–∞–Ω—Å: {cards} üÉè")
#reply_markup=buy_cards_kb